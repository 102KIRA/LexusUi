--// Connections
local GetService = game.GetService
local Connect = game.Loaded.Connect
local Wait = game.Loaded.Wait

if (not game:IsLoaded()) then
    local Loaded = game.Loaded
    Loaded.Wait(Loaded)
end

--// Important 
local Setup = {
    Keybind = Enum.KeyCode.LeftControl,
    Size = UDim2.new(0, 400, 0, 300),
}

local Theme = {
    Primary = Color3.fromRGB(30, 30, 30),
    Secondary = Color3.fromRGB(35, 35, 35),
    Component = Color3.fromRGB(40, 40, 40),
    Interactables = Color3.fromRGB(45, 45, 45),
    Title = Color3.fromRGB(240, 240, 240),
    Description = Color3.fromRGB(200, 200, 200),
    ControlButton = Color3.fromRGB(200, 200, 200), -- Neutral color for control buttons
}

--// Services
local LocalPlayer = GetService(game, "Players").LocalPlayer
local Services = {
    Input = GetService(game, "UserInputService"),
}

local Player = {
    GUI = LocalPlayer.PlayerGui,
}

local SetProperty = function(Object: Instance, Properties: {})
    for Index, Property in next, Properties do
        Object[Index] = (Property)
    end
    return Object
end

--// Custom UI Setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "FinalUI"
ScreenGui.Parent = game.CoreGui

local StoredInfo = {
    Tabs = {},
    Sections = {}
}

local Library = {}

function Library:CreateWindow(Settings: { Title: string, Size: UDim2 })
    -- Main Window (Frame)
    local Window = Instance.new("Frame")
    Window.Name = "Main"
    Window.Size = Settings.Size or Setup.Size
    Window.Position = UDim2.new(0.5, -Window.Size.X.Offset / 2, 0.5, -Window.Size.Y.Offset / 2)
    Window.BackgroundColor3 = Theme.Primary
    Window.BackgroundTransparency = 0 -- No transparency
    Window.BorderSizePixel = 0
    Window.Parent = ScreenGui

    local WindowCorner = Instance.new("UICorner")
    WindowCorner.CornerRadius = UDim.new(0, 10)
    WindowCorner.Parent = Window

    -- Sidebar (Frame for tabs)
    local Sidebar = Instance.new("Frame")
    Sidebar.Name = "Sidebar"
    Sidebar.Size = UDim2.new(0, 150, 1, 0)
    Sidebar.BackgroundColor3 = Theme.Primary
    Sidebar.BackgroundTransparency = 0
    Sidebar.BorderSizePixel = 0
    Sidebar.Parent = Window

    local SidebarCorner = Instance.new("UICorner")
    SidebarCorner.CornerRadius = UDim.new(0, 10)
    SidebarCorner.Parent = Sidebar

    -- Sidebar Top (Frame for control buttons and icon)
    local SidebarTop = Instance.new("Frame")
    SidebarTop.Name = "Top"
    SidebarTop.Size = UDim2.new(1, 0, 0, 30)
    SidebarTop.BackgroundColor3 = Theme.Secondary
    SidebarTop.BackgroundTransparency = 0
    SidebarTop.BorderSizePixel = 0
    SidebarTop.Parent = Sidebar

    local SidebarTopCorner = Instance.new("UICorner")
    SidebarTopCorner.CornerRadius = UDim.new(0, 10)
    SidebarTopCorner.Parent = SidebarTop

    -- Icon (decal for window)
    local Icon = Instance.new("ImageLabel")
    Icon.Name = "Icon"
    Icon.Size = UDim2.new(0, 20, 0, 20)
    Icon.Position = UDim2.new(0, 5, 0.5, -10)
    Icon.BackgroundTransparency = 1
    Icon.Image = ""
    Icon.ImageColor3 = Theme.Title
    Icon.Parent = SidebarTop

    -- Buttons Frame (for control buttons)
    local ButtonsFrame = Instance.new("Frame")
    ButtonsFrame.Name = "Buttons"
    ButtonsFrame.Size = UDim2.new(0, 90, 1, 0)
    ButtonsFrame.Position = UDim2.new(1, -90, 0, 0)
    ButtonsFrame.BackgroundTransparency = 1
    ButtonsFrame.Parent = SidebarTop

    local ButtonsLayout = Instance.new("UIListLayout")
    ButtonsLayout.FillDirection = Enum.FillDirection.Horizontal
    ButtonsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
    ButtonsLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    ButtonsLayout.Padding = UDim.new(0, 5)
    ButtonsLayout.Parent = ButtonsFrame

    -- Tab Container (Frame for tab buttons)
    local TabContainer = Instance.new("Frame")
    TabContainer.Name = "TabContainer"
    TabContainer.Size = UDim2.new(1, 0, 1, -30)
    TabContainer.Position = UDim2.new(0, 0, 0, 30)
    TabContainer.BackgroundTransparency = 1
    TabContainer.Parent = Sidebar

    local TabLayout = Instance.new("UIListLayout")
    TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabLayout.Padding = UDim.new(0, 5)
    TabLayout.Parent = TabContainer

    local TabPadding = Instance.new("UIPadding")
    TabPadding.PaddingTop = UDim.new(0, 5)
    TabPadding.Parent = TabContainer

    -- Main Content Area (Frame for tab content)
    local MainHolder = Instance.new("Frame")
    MainHolder.Name = "MainHolder"
    MainHolder.Size = UDim2.new(1, -150, 1, 0)
    MainHolder.Position = UDim2.new(0, 150, 0, 0)
    MainHolder.BackgroundColor3 = Theme.Primary
    MainHolder.BackgroundTransparency = 0
    MainHolder.BorderSizePixel = 0
    MainHolder.Parent = Window

    local MainHolderCorner = Instance.new("UICorner")
    MainHolderCorner.CornerRadius = UDim.new(0, 10)
    MainHolderCorner.Parent = MainHolder

    local Options = {}
    local Opened = true
    local Maximized = false

    -- Create Control Buttons (Neutral color, rounded corners)
    local function CreateControlButton(Name, Text)
        local Button = Instance.new("TextButton")
        Button.Name = Name
        Button.Size = UDim2.new(0, 20, 0, 20)
        Button.BackgroundColor3 = Theme.ControlButton -- Neutral color
        Button.Text = Text
        Button.TextColor3 = Color3.fromRGB(0, 0, 0) -- Black text for contrast
        Button.TextSize = 14
        Button.Font = Enum.Font.SourceSansBold
        Button.BorderSizePixel = 0
        Button.Parent = ButtonsFrame

        local ButtonCorner = Instance.new("UICorner")
        ButtonCorner.CornerRadius = UDim.new(0, 5)
        ButtonCorner.Parent = Button

        return Button
    end

    local MinimizeButton = CreateControlButton("Minimize", "-")
    local MaximizeButton = CreateControlButton("Maximize", "□")
    local CloseButton = CreateControlButton("Close", "x")

    -- Control Button Handlers
    for Index, Button in next, ButtonsFrame:GetChildren() do
        if Button:IsA("TextButton") then
            local Name = Button.Name
            Connect(Button.MouseButton1Click, function() 
                if Name == "Close" then
                    Window.Visible = false
                elseif Name == "Maximize" then
                    if Maximized then
                        Maximized = false
                        Window.Size = Setup.Size
                        Window.Position = UDim2.new(0.5, -Window.Size.X.Offset / 2, 0.5, -Window.Size.Y.Offset / 2)
                    else
                        Maximized = true
                        Window.Size = UDim2.fromScale(1, 1)
                        Window.Position = UDim2.fromScale(0.5, 0.5)
                    end
                elseif Name == "Minimize" then
                    Opened = false
                    Window.Visible = false
                end
            end)
        end
    end

    -- Keybind to toggle window visibility
    Services.Input.InputBegan:Connect(function(Input, Focused) 
        if (Input.KeyCode == Setup.Keybind) and not Focused then
            if Opened then
                Opened = false
                Window.Visible = false
            else
                Opened = true
                Window.Visible = true
            end
        end
    end)

    -- Tab Management
    function Options:SetTab(Name: string)
        for Index, Button in next, TabContainer:GetChildren() do
            if Button:IsA("TextButton") then
                local Opened, SameName = Button:FindFirstChild("Value"), (Button.Name == Name)
                if SameName and not Opened.Value then
                    SetProperty(Opened, { Value = true })
                elseif not SameName and Opened.Value then
                    SetProperty(Opened, { Value = false })
                end
            end
        end

        for Index, Main in next, MainHolder:GetChildren() do
            if Main:IsA("ScrollingFrame") then
                local SameName = (Main.Name == Name)
                Main.Visible = SameName
            end
        end
    end

    -- Component Functions
    function Options:AddTab(Settings: { Title: string })
        if StoredInfo.Tabs[Settings.Title] then 
            error("[UI LIB]: A tab with the same name has already been created") 
        end 

        -- Tab Button
        local TabButton = Instance.new("TextButton")
        TabButton.Name = Settings.Title
        TabButton.Size = UDim2.new(1, -10, 0, 30)
        TabButton.BackgroundColor3 = Theme.Component
        TabButton.BackgroundTransparency = 0
        TabButton.Text = ""
        TabButton.LayoutOrder = #StoredInfo.Tabs + 1
        TabButton.Parent = TabContainer

        local TabButtonCorner = Instance.new("UICorner")
        TabButtonCorner.CornerRadius = UDim.new(0, 5)
        TabButtonCorner.Parent = TabButton

        local TabText = Instance.new("TextLabel")
        TabText.Size = UDim2.new(1, -30, 1, 0)
        TabText.Position = UDim2.new(0, 30, 0, 0)
        TabText.BackgroundTransparency = 1
        TabText.Text = Settings.Title
        TabText.TextColor3 = Theme.Title
        TabText.TextSize = 16
        TabText.Font = Enum.Font.SourceSans
        TabText.TextXAlignment = Enum.TextXAlignment.Left
        TabText.Parent = TabButton

        local TabIcon = Instance.new("ImageLabel")
        TabIcon.Name = "TabIcon"
        TabIcon.Size = UDim2.new(0, 20, 0, 20)
        TabIcon.Position = UDim2.new(0, 5, 0.5, -10)
        TabIcon.BackgroundTransparency = 1
        TabIcon.Image = ""
        TabIcon.ImageColor3 = Theme.Title
        TabIcon.Parent = TabButton

        local Value = Instance.new("BoolValue")
        Value.Name = "Value"
        Value.Value = false
        Value.Parent = TabButton

        -- Main Content for Tab
        local TabContent = Instance.new("ScrollingFrame")
        TabContent.Name = Settings.Title
        TabContent.Size = UDim2.new(1, 0, 1, 0)
        TabContent.BackgroundTransparency = 1
        TabContent.Visible = false
        TabContent.ScrollBarThickness = 5
        TabContent.ScrollBarImageColor3 = Theme.Component
        TabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
        TabContent.AutomaticCanvasSize = Enum.AutomaticSize.Y
        TabContent.Parent = MainHolder

        local TabContentLayout = Instance.new("UIListLayout")
        TabContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        TabContentLayout.Padding = UDim.new(0, 5)
        TabContentLayout.Parent = TabContent

        local TabContentPadding = Instance.new("UIPadding")
        TabContentPadding.PaddingTop = UDim.new(0, 5)
        TabContentPadding.PaddingLeft = UDim.new(0, 5)
        TabContentPadding.PaddingRight = UDim.new(0, 5)
        TabContentPadding.Parent = TabContent

        StoredInfo.Tabs[Settings.Title] = { TabButton = TabButton, TabContent = TabContent }

        TabButton.MouseButton1Click:Connect(function()
            Options:SetTab(TabButton.Name)
        end)

        if #StoredInfo.Tabs == 1 then
            Options:SetTab(Settings.Title)
        end

        return TabContent
    end

    function Options:AddTabIcon(TabName: string, DecalId: string)
        if StoredInfo.Tabs[TabName] then
            local TabButton = StoredInfo.Tabs[TabName].TabButton
            local TabIcon = TabButton:FindFirstChild("TabIcon")
            if TabIcon then
                TabIcon.Image = DecalId
            end
        else
            error("[UI LIB]: Tab " .. TabName .. " does not exist")
        end
    end

    function Options:AddSection(Settings: { Title: string, Tab: Instance })
        local Section = Instance.new("Frame")
        Section.Name = Settings.Title
        Section.Size = UDim2.new(1, -10, 0, 30)
        Section.BackgroundColor3 = Theme.Component
        Section.BackgroundTransparency = 0
        Section.Parent = Settings.Tab or MainHolder:GetChildren()[1]

        local SectionCorner = Instance.new("UICorner")
        SectionCorner.CornerRadius = UDim.new(0, 5)
        SectionCorner.Parent = Section

        local SectionTitle = Instance.new("TextLabel")
        SectionTitle.Size = UDim2.new(1, 0, 1, 0)
        SectionTitle.BackgroundTransparency = 1
        SectionTitle.Text = Settings.Title
        SectionTitle.TextColor3 = Theme.Title
        SectionTitle.TextSize = 16
        SectionTitle.Font = Enum.Font.SourceSansBold
        SectionTitle.TextXAlignment = Enum.TextXAlignment.Left
        SectionTitle.Parent = Section

        local SectionContent = Instance.new("Frame")
        SectionContent.Name = "Content"
        SectionContent.Size = UDim2.new(1, 0, 0, 0)
        SectionContent.BackgroundTransparency = 1
        SectionContent.AutomaticSize = Enum.AutomaticSize.Y
        SectionContent.Parent = Settings.Tab or MainHolder:GetChildren()[1]

        local SectionContentLayout = Instance.new("UIListLayout")
        SectionContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        SectionContentLayout.Padding = UDim.new(0, 5)
        SectionContentLayout.Parent = SectionContent

        StoredInfo.Sections[Settings.Title] = SectionContent

        return SectionContent
    end

    function Options:AddLabel(Settings: { Text: string, Tab: Instance, Section: Instance })
        local Label = Instance.new("TextLabel")
        Label.Size = UDim2.new(1, -10, 0, 20)
        Label.BackgroundTransparency = 1
        Label.Text = Settings.Text
        Label.TextColor3 = Theme.Description
        Label.TextSize = 14
        Label.Font = Enum.Font.SourceSans
        Label.TextXAlignment = Enum.TextXAlignment.Left
        Label.TextWrapped = true
        Label.Parent = Settings.Section or Settings.Tab or MainHolder:GetChildren()[1]
    end

    function Options:AddButton(Settings: { Title: string, Description: string, Tab: Instance, Section: Instance }) 
        local Paragraph = Instance.new("Frame")
        Paragraph.Size = UDim2.new(1, -10, 0, 50)
        Paragraph.BackgroundColor3 = Theme.Component
        Paragraph.BackgroundTransparency = 0
        Paragraph.Parent = Settings.Section or Settings.Tab or MainHolder:GetChildren()[1]

        local ParagraphCorner = Instance.new("UICorner")
        ParagraphCorner.CornerRadius = UDim.new(0, 5)
        ParagraphCorner.Parent = Paragraph

        local Labels = Instance.new("Frame")
        Labels.Name = "Labels"
        Labels.Size = UDim2.new(1, 0, 1, 0)
        Labels.BackgroundTransparency = 1
        Labels.Parent = Paragraph

        local Title = Instance.new("TextLabel")
        Title.Name = "Title"
        Title.Size = UDim2.new(1, 0, 0, 20)
        Title.BackgroundTransparency = 1
        Title.Text = "→ " .. Settings.Title -- Arrow prefix
        Title.TextColor3 = Theme.Title
        Title.TextSize = 16
        Title.Font = Enum.Font.SourceSansBold
        Title.TextXAlignment = Enum.TextXAlignment.Left
        Title.Parent = Labels

        local Description = Instance.new("TextLabel")
        Description.Name = "Description"
        Description.Size = UDim2.new(1, 0, 0, 30)
        Description.Position = UDim2.new(0, 0, 0, 20)
        Description.BackgroundTransparency = 1
        Description.Text = Settings.Description
        Description.TextColor3 = Theme.Description
        Description.TextSize = 14
        Description.Font = Enum.Font.SourceSans
        Description.TextXAlignment = Enum.TextXAlignment.Left
        Description.TextWrapped = true
        Description.Parent = Labels
    end

    function Options:AddToggle(Settings: { Title: string, Description: string, Default: boolean, Callback: any, Tab: Instance, Section: Instance }) 
        local Toggle = Instance.new("TextButton")
        Toggle.Size = UDim2.new(1, -10, 0, 50)
        Toggle.BackgroundColor3 = Theme.Component
        Toggle.BackgroundTransparency = 0
        Toggle.Text = ""
        Toggle.Parent = Settings.Section or Settings.Tab or MainHolder:GetChildren()[1]

        local ToggleCorner = Instance.new("UICorner")
        ToggleCorner.CornerRadius = UDim.new(0, 5)
        ToggleCorner.Parent = Toggle

        local Labels = Instance.new("Frame")
        Labels.Name = "Labels"
        Labels.Size = UDim2.new(1, -40, 1, 0)
        Labels.BackgroundTransparency = 1
        Labels.Parent = Toggle

        local Title = Instance.new("TextLabel")
        Title.Name = "Title"
        Title.Size = UDim2.new(1, 0, 0, 20)
        Title.BackgroundTransparency = 1
        Title.Text = Settings.Title
        Title.TextColor3 = Theme.Title
        Title.TextSize = 16
        Title.Font = Enum.Font.SourceSansBold
        Title.TextXAlignment = Enum.TextXAlignment.Left
        Title.Parent = Labels

        local Description = Instance.new("TextLabel")
        Description.Name = "Description"
        Description.Size = UDim2.new(1, 0, 0, 30)
        Description.Position = UDim2.new(0, 0, 0, 20)
        Description.BackgroundTransparency = 1
        Description.Text = Settings.Description
        Description.TextColor3 = Theme.Description
        Description.TextSize = 14
        Description.Font = Enum.Font.SourceSans
        Description.TextXAlignment = Enum.TextXAlignment.Left
        Description.TextWrapped = true
        Description.Parent = Labels

        local On = Instance.new("BoolValue")
        On.Name = "Value"
        On.Value = Settings.Default
        On.Parent = Toggle

        local Main = Instance.new("Frame")
        Main.Name = "Main"
        Main.Size = UDim2.new(0, 30, 0, 14)
        Main.Position = UDim2.new(1, -30, 0.5, -7)
        Main.BackgroundColor3 = Theme.Interactables
        Main.Parent = Toggle

        local ToggleCorner = Instance.new("UICorner")
        ToggleCorner.CornerRadius = UDim.new(0, 5)
        ToggleCorner.Parent = Main

        local ToggleText = Instance.new("TextLabel")
        ToggleText.Name = "ToggleText"
        ToggleText.Size = UDim2.new(1, 0, 1, 0)
        ToggleText.BackgroundTransparency = 1
        ToggleText.Text = Settings.Default and "=ｏ" or "ｏ="
        ToggleText.TextColor3 = Color3.fromRGB(255, 255, 255)
        ToggleText.TextSize = 12
        ToggleText.Font = Enum.Font.SourceSans
        ToggleText.TextXAlignment = Enum.TextXAlignment.Center
        ToggleText.Parent = Main

        local Set = function(Value)
            ToggleText.Text = Value and "=ｏ" or "ｏ="
            On.Value = Value
        end 

        Connect(Toggle.MouseButton1Click, function()
            local Value = not On.Value
            Set(Value)
            Settings.Callback(Value)
        end)

        Set(Settings.Default)
    end

    function Options:AddDropdown(Settings: { Title: string, Options: {string}, Default: string, Callback: any, Tab: Instance, Section: Instance })
        local Dropdown = Instance.new("TextButton")
        Dropdown.Size = UDim2.new(1, -10, 0, 30)
        Dropdown.BackgroundColor3 = Theme.Component
        Dropdown.BackgroundTransparency = 0
        Dropdown.Text = ""
        Dropdown.Parent = Settings.Section or Settings.Tab or MainHolder:GetChildren()[1]

        local DropdownCorner = Instance.new("UICorner")
        DropdownCorner.CornerRadius = UDim.new(0, 5)
        DropdownCorner.Parent = Dropdown

        local DropdownTitle = Instance.new("TextLabel")
        DropdownTitle.Size = UDim2.new(1, -40, 1, 0)
        DropdownTitle.BackgroundTransparency = 1
        DropdownTitle.Text = Settings.Title .. ": " .. Settings.Default
        DropdownTitle.TextColor3 = Theme.Title
        DropdownTitle.TextSize = 16
        DropdownTitle.Font = Enum.Font.SourceSans
        DropdownTitle.TextXAlignment = Enum.TextXAlignment.Left
        DropdownTitle.Parent = Dropdown

        local DropdownIcon = Instance.new("TextLabel")
        DropdownIcon.Size = UDim2.new(0, 30, 1, 0)
        DropdownIcon.Position = UDim2.new(1, -30, 0, 0)
        DropdownIcon.BackgroundTransparency = 1
        DropdownIcon.Text = "(__)"
        DropdownIcon.TextColor3 = Theme.Title
        DropdownIcon.TextSize = 16
        DropdownIcon.Font = Enum.Font.SourceSans
        DropdownIcon.TextXAlignment = Enum.TextXAlignment.Center
        DropdownIcon.Parent = Dropdown

        local DropdownList = Instance.new("Frame")
        DropdownList.Size = UDim2.new(1, 0, 0, 0)
        DropdownList.Position = UDim2.new(0, 0, 1, 5)
        DropdownList.BackgroundColor3 = Theme.Component
        DropdownList.BackgroundTransparency = 0
        DropdownList.Visible = false
        DropdownList.Parent = Dropdown

        local DropdownListCorner = Instance.new("UICorner")
        DropdownListCorner.CornerRadius = UDim.new(0, 5)
        DropdownListCorner.Parent = DropdownList

        local DropdownListLayout = Instance.new("UIListLayout")
        DropdownListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        DropdownListLayout.Padding = UDim.new(0, 2)
        DropdownListLayout.Parent = DropdownList

        local DropdownListPadding = Instance.new("UIPadding")
        DropdownListPadding.PaddingTop = UDim.new(0, 2)
        DropdownListPadding.PaddingBottom = UDim.new(0, 2)
        DropdownListPadding.PaddingLeft = UDim.new(0, 2)
        DropdownListPadding.PaddingRight = UDim.new(0, 2)
        DropdownListPadding.Parent = DropdownList

        local IsOpen = false

        for _, Option in pairs(Settings.Options) do
            local OptionButton = Instance.new("TextButton")
            OptionButton.Size = UDim2.new(1, 0, 0, 20)
            OptionButton.BackgroundColor3 = Theme.Interactables
            OptionButton.Text = Option
            OptionButton.TextColor3 = Theme.Title
            OptionButton.TextSize = 14
            OptionButton.Font = Enum.Font.SourceSans
            OptionButton.TextXAlignment = Enum.TextXAlignment.Left
            OptionButton.Parent = DropdownList

            local OptionCorner = Instance.new("UICorner")
            OptionCorner.CornerRadius = UDim.new(0, 5)
            OptionCorner.Parent = OptionButton

            OptionButton.MouseButton1Click:Connect(function()
                DropdownTitle.Text = Settings.Title .. ": " .. Option
                Settings.Callback(Option)
                IsOpen = false
                DropdownList.Visible = false
                DropdownList.Size = UDim2.new(1, 0, 0, 0)
            end)
        end

        Dropdown.MouseButton1Click:Connect(function()
            IsOpen = not IsOpen
            DropdownList.Visible = IsOpen
            if IsOpen then
                DropdownList.Size = UDim2.new(1, 0, 0, #Settings.Options * 22 + 4)
            else
                DropdownList.Size = UDim2.new(1, 0, 0, 0)
            end
        end)
    end

    function Options:addIcon(DecalId: string)
        Icon.Image = DecalId
    end

    return Options
end

return Library
