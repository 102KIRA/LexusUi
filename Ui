--// Connections
local GetService = game.GetService
local Connect = game.Loaded.Connect
local Wait = game.Loaded.Wait
local Clone = game.Clone 
local Destroy = game.Destroy 

if (not game:IsLoaded()) then
    local Loaded = game.Loaded
    Loaded.Wait(Loaded);
end

--// Important 
local Setup = {
    Keybind = Enum.KeyCode.LeftControl,
    Transparency = 0.2,
    ThemeMode = "Dark",
    Size = UDim2.new(0, 500, 0, 300), -- Default size for the window
}

local Theme = { --// (Dark Theme)
    --// Frames:
    Primary = Color3.fromRGB(30, 30, 30),
    Secondary = Color3.fromRGB(35, 35, 35),
    Component = Color3.fromRGB(40, 40, 40),
    Interactables = Color3.fromRGB(45, 45, 45),

    --// Text:
    Tab = Color3.fromRGB(200, 200, 200),
    Title = Color3.fromRGB(240, 240, 240),
    Description = Color3.fromRGB(200, 200, 200),

    --// Outlines:
    Shadow = Color3.fromRGB(0, 0, 0),
    Outline = Color3.fromRGB(40, 40, 40),

    --// Image:
    Icon = Color3.fromRGB(220, 220, 220),
}

--// Services & Functions
local Type = nil
local LocalPlayer = GetService(game, "Players").LocalPlayer;
local Services = {
    Tween = GetService(game, "TweenService");
    Run = GetService(game, "RunService");
    Input = GetService(game, "UserInputService");
}

local Player = {
    Mouse = LocalPlayer:GetMouse();
    GUI = LocalPlayer.PlayerGui;
}

local Tween = function(Object : Instance, Speed : number, Properties : {},  Info : { EasingStyle: Enum?, EasingDirection: Enum? })
    local Style, Direction

    if Info then
        Style, Direction = Info["EasingStyle"], Info["EasingDirection"]
    else
        Style, Direction = Enum.EasingStyle.Sine, Enum.EasingDirection.Out
    end

    return Services.Tween:Create(Object, TweenInfo.new(Speed, Style, Direction), Properties):Play()
end

local SetProperty = function(Object: Instance, Properties: {})
    for Index, Property in next, Properties do
        Object[Index] = (Property);
    end

    return Object
end

local Multiply = function(Value, Amount)
    local New = {
        Value.X.Scale * Amount;
        Value.X.Offset * Amount;
        Value.Y.Scale * Amount;
        Value.Y.Offset * Amount;
    }

    return UDim2.new(unpack(New))
end

local Color = function(Color, Factor, Mode)
    Mode = Mode or Setup.ThemeMode

    if Mode == "Light" then
        return Color3.fromRGB((Color.R * 255) - Factor, (Color.G * 255) - Factor, (Color.B * 255) - Factor)
    else
        return Color3.fromRGB((Color.R * 255) + Factor, (Color.G * 255) + Factor, (Color.B * 255) + Factor)
    end
end

local Drag = function(Canvas)
    if Canvas then
        local Dragging;
        local DragInput;
        local Start;
        local StartPosition;

        local function Update(input)
            local delta = input.Position - Start
            Canvas.Position = UDim2.new(StartPosition.X.Scale, StartPosition.X.Offset + delta.X, StartPosition.Y.Scale, StartPosition.Y.Offset + delta.Y)
        end

        Connect(Canvas.InputBegan, function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch and not Type then
                Dragging = true
                Start = Input.Position
                StartPosition = Canvas.Position

                Connect(Input.Changed, function()
                    if Input.UserInputState == Enum.UserInputState.End then
                        Dragging = false
                    end
                end)
            end
        end)

        Connect(Canvas.InputChanged, function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch and not Type then
                DragInput = Input
            end
        end)

        Connect(Services.Input.InputChanged, function(Input)
            if Input == DragInput and Dragging and not Type then
                Update(Input)
            end
        end)
    end
end

Resizing = { 
    TopLeft = { X = Vector2.new(-1, 0),   Y = Vector2.new(0, -1)};
    TopRight = { X = Vector2.new(1, 0),    Y = Vector2.new(0, -1)};
    BottomLeft = { X = Vector2.new(-1, 0),   Y = Vector2.new(0, 1)};
    BottomRight = { X = Vector2.new(1, 0),    Y = Vector2.new(0, 1)};
}

Resizeable = function(Tab, Minimum, Maximum)
    task.spawn(function()
        local MousePos, Size, UIPos = nil, nil, nil

        if Tab and Tab:FindFirstChild("Resize") then
            local Positions = Tab:FindFirstChild("Resize")

            for Index, Types in next, Positions:GetChildren() do
                Connect(Types.InputBegan, function(Input)
                    if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                        Type = Types
                        MousePos = Vector2.new(Player.Mouse.X, Player.Mouse.Y)
                        Size = Tab.AbsoluteSize
                        UIPos = Tab.Position
                    end
                end)

                Connect(Types.InputEnded, function(Input)
                    if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                        Type = nil
                    end
                end)
            end
        end

        local Resize = function(Delta)
            if Type and MousePos and Size and UIPos and Tab:FindFirstChild("Resize")[Type.Name] == Type then
                local Mode = Resizing[Type.Name]
                local NewSize = Vector2.new(Size.X + Delta.X * Mode.X.X, Size.Y + Delta.Y * Mode.Y.Y)
                NewSize = Vector2.new(math.clamp(NewSize.X, Minimum.X, Maximum.X), math.clamp(NewSize.Y, Minimum.Y, Maximum.Y))

                local AnchorOffset = Vector2.new(Tab.AnchorPoint.X * Size.X, Tab.AnchorPoint.Y * Size.Y)
                local NewAnchorOffset = Vector2.new(Tab.AnchorPoint.X * NewSize.X, Tab.AnchorPoint.Y * NewSize.Y)
                local DeltaAnchorOffset = NewAnchorOffset - AnchorOffset

                Tab.Size = UDim2.new(0, NewSize.X, 0, NewSize.Y)

                local NewPosition = UDim2.new(
                    UIPos.X.Scale, 
                    UIPos.X.Offset + DeltaAnchorOffset.X * Mode.X.X,
                    UIPos.Y.Scale,
                    UIPos.Y.Offset + DeltaAnchorOffset.Y * Mode.Y.Y
                )
                Tab.Position = NewPosition
            end
        end

        Connect(Player.Mouse.Move, function()
            if Type then
                Resize(Vector2.new(Player.Mouse.X, Player.Mouse.Y) - MousePos)
            end
        end)
    end)
end

--// Tables for Data
local Animations = {}
local Library = {};
local StoredInfo = {
    ["Sections"] = {};
    ["Tabs"] = {}
};

--// Animations [Window]
function Animations:Open(Window: CanvasGroup, Transparency: number, UseCurrentSize: boolean)
    local Original = (UseCurrentSize and Window.Size) or Setup.Size
    local Multiplied = Multiply(Original, 1.1)
    local Shadow = Window:FindFirstChildOfClass("UIStroke")

    SetProperty(Shadow, { Transparency = 1 })
    SetProperty(Window, {
        Size = Multiplied,
        GroupTransparency = 1,
        Visible = true,
    })

    Tween(Shadow, .25, { Transparency = 0.5 })
    Tween(Window, .25, {
        Size = Original,
        GroupTransparency = Transparency or 0,
    })
end

function Animations:Close(Window: CanvasGroup)
    local Original = Window.Size
    local Multiplied = Multiply(Original, 1.1)
    local Shadow = Window:FindFirstChildOfClass("UIStroke")

    SetProperty(Window, {
        Size = Original,
    })

    Tween(Shadow, .25, { Transparency = 1 })
    Tween(Window, .25, {
        Size = Multiplied,
        GroupTransparency = 1,
    })

    task.wait(.25)
    Window.Size = Original
    Window.Visible = false
end

function Animations:Component(Component: any, Custom: boolean)    
    Connect(Component.InputBegan, function() 
        if Custom then
            Tween(Component, .25, { Transparency = .85 });
        else
            Tween(Component, .25, { BackgroundColor3 = Color(Theme.Component, 5, Setup.ThemeMode) });
        end
    end)

    Connect(Component.InputEnded, function() 
        if Custom then
            Tween(Component, .25, { Transparency = 1 });
        else
            Tween(Component, .25, { BackgroundColor3 = Theme.Component });
        end
    end)
end

--// Custom UI Setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "CustomUI"
ScreenGui.Parent = game.CoreGui

--// Library [Window]
function Library:CreateWindow(Settings: { Title: string, Size: UDim2, Transparency: number, MinimizeKeybind: Enum.KeyCode?, Theme: string })
    -- Main Window (CanvasGroup)
    local Window = Instance.new("CanvasGroup")
    Window.Name = "Main"
    Window.Size = Settings.Size or Setup.Size
    Window.Position = UDim2.new(0.5, -Window.Size.X.Offset / 2, 0.5, -Window.Size.Y.Offset / 2)
    Window.BackgroundColor3 = Theme.Primary
    Window.GroupTransparency = Setup.Transparency
    Window.Parent = ScreenGui

    local WindowStroke = Instance.new("UIStroke")
    WindowStroke.Name = "Shadow"
    WindowStroke.Color = Theme.Shadow
    WindowStroke.Transparency = 0.5
    WindowStroke.Parent = Window

    -- Sidebar (Frame)
    local Sidebar = Instance.new("Frame")
    Sidebar.Name = "Sidebar"
    Sidebar.Size = UDim2.new(0, 150, 1, 0)
    Sidebar.BackgroundColor3 = Theme.Primary
    Sidebar.BorderSizePixel = 0
    Sidebar.Parent = Window

    -- Sidebar Top (Frame for control buttons)
    local SidebarTop = Instance.new("Frame")
    SidebarTop.Name = "Top"
    SidebarTop.Size = UDim2.new(1, 0, 0, 30)
    SidebarTop.BackgroundColor3 = Theme.Secondary
    SidebarTop.BorderSizePixel = 0
    SidebarTop.Parent = Sidebar

    local ButtonsFrame = Instance.new("Frame")
    ButtonsFrame.Name = "Buttons"
    ButtonsFrame.Size = UDim2.new(0, 90, 1, 0)
    ButtonsFrame.Position = UDim2.new(1, -90, 0, 0)
    ButtonsFrame.BackgroundTransparency = 1
    ButtonsFrame.Parent = SidebarTop

    local ButtonsLayout = Instance.new("UIListLayout")
    ButtonsLayout.FillDirection = Enum.FillDirection.Horizontal
    ButtonsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
    ButtonsLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    ButtonsLayout.Padding = UDim.new(0, 5)
    ButtonsLayout.Parent = ButtonsFrame

    -- Window Control Buttons (Minimize, Maximize, Close)
    local function CreateControlButton(Name, Text, Color)
        local Button = Instance.new("TextButton")
        Button.Name = Name
        Button.Size = UDim2.new(0, 20, 0, 20)
        Button.BackgroundColor3 = Color
        Button.Text = Text
        Button.TextColor3 = Color3.fromRGB(255, 255, 255)
        Button.TextSize = 14
        Button.Font = Enum.Font.SourceSansBold
        Button.BorderSizePixel = 0
        Button.Parent = ButtonsFrame
        return Button
    end

    local MinimizeButton = CreateControlButton("Minimize", "-", Color3.fromRGB(0, 255, 0)) -- Green
    local MaximizeButton = CreateControlButton("Maximize", "□", Color3.fromRGB(255, 165, 0)) -- Orange
    local CloseButton = CreateControlButton("Close", "x", Color3.fromRGB(255, 0, 0)) -- Red

    -- Sidebar Tab Container
    local TabContainer = Instance.new("Frame")
    TabContainer.Name = "Tab"
    TabContainer.Size = UDim2.new(1, 0, 1, -30)
    TabContainer.Position = UDim2.new(0, 0, 0, 30)
    TabContainer.BackgroundTransparency = 1
    TabContainer.Parent = Sidebar

    local TabLayout = Instance.new("UIListLayout")
    TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabLayout.Padding = UDim.new(0, 5)
    TabLayout.Parent = TabContainer

    local TabPadding = Instance.new("UIPadding")
    TabPadding.PaddingTop = UDim.new(0, 5)
    TabPadding.Parent = TabContainer

    -- Main Content Area (Frame)
    local MainHolder = Instance.new("Frame")
    MainHolder.Name = "Main"
    MainHolder.Size = UDim2.new(1, -150, 1, 0)
    MainHolder.Position = UDim2.new(0, 150, 0, 0)
    MainHolder.BackgroundColor3 = Theme.Secondary
    MainHolder.BorderSizePixel = 0
    MainHolder.Parent = Window

    -- Background Shadow (Frame)
    local BackgroundShadow = Instance.new("Frame")
    BackgroundShadow.Name = "BackgroundShadow"
    BackgroundShadow.Size = UDim2.new(1, 0, 1, 0)
    BackgroundShadow.BackgroundTransparency = 1
    BackgroundShadow.Parent = Window

    -- Resize Frame
    local ResizeFrame = Instance.new("Frame")
    ResizeFrame.Name = "Resize"
    ResizeFrame.Size = UDim2.new(1, 0, 1, 0)
    ResizeFrame.BackgroundTransparency = 1
    ResizeFrame.Parent = Window

    local function CreateResizeCorner(Name, Position)
        local Corner = Instance.new("Frame")
        Corner.Name = Name
        Corner.Size = UDim2.new(0, 10, 0, 10)
        Corner.Position = Position
        Corner.BackgroundTransparency = 1
        Corner.Parent = ResizeFrame
    end

    CreateResizeCorner("TopLeft", UDim2.new(0, 0, 0, 0))
    CreateResizeCorner("TopRight", UDim2.new(1, -10, 0, 0))
    CreateResizeCorner("BottomLeft", UDim2.new(0, 0, 1, -10))
    CreateResizeCorner("BottomRight", UDim2.new(1, -10, 1, -10))

    local Options = {};
    local Opened = true;
    local Maximized = false;

    -- Enable dragging and resizing
    Drag(Window)
    Resizeable(Window, Vector2.new(400, 250), Vector2.new(9e9, 9e9))
    Setup.Transparency = Settings.Transparency or 0
    Setup.Size = Settings.Size or Setup.Size
    Setup.ThemeMode = Settings.Theme or "Dark"

    if Settings.MinimizeKeybind then
        Setup.Keybind = Settings.MinimizeKeybind
    end

    -- Animate
    local Close = function()
        if Opened then
            Opened = false
            Animations:Close(Window)
            Window.Visible = false
        else
            Animations:Open(Window, Setup.Transparency)
            Opened = true
        end
    end

    -- Window Control Button Handlers
    for Index, Button in next, ButtonsFrame:GetChildren() do
        if Button:IsA("TextButton") then
            local Name = Button.Name
            Animations:Component(Button, true)

            Connect(Button.MouseButton1Click, function() 
                if Name == "Close" then
                    Close()
                elseif Name == "Maximize" then
                    if Maximized then
                        Maximized = false
                        Tween(Window, .15, { Size = Setup.Size })
                    else
                        Maximized = true
                        Tween(Window, .15, { Size = UDim2.fromScale(1, 1), Position = UDim2.fromScale(0.5, 0.5) })
                    end
                elseif Name == "Minimize" then
                    Opened = false
                    Window.Visible = false
                end
            end)
        end
    end

    Services.Input.InputBegan:Connect(function(Input, Focused) 
        if (Input == Setup.Keybind or Input.KeyCode == Setup.Keybind) and not Focused then
            Close()
        end
    end)

    -- Tab Functions
    function Options:SetTab(Name: string)
        for Index, Button in next, TabContainer:GetChildren() do
            if Button:IsA("TextButton") then
                local Opened, SameName = Button:FindFirstChild("Value"), (Button.Name == Name)
                local Padding = Button:FindFirstChildOfClass("UIPadding")

                if SameName and not Opened.Value then
                    Tween(Padding, .25, { PaddingLeft = UDim.new(0, 25) })
                    Tween(Button, .25, { BackgroundTransparency = 0.9, Size = UDim2.new(1, -15, 0, 30) })
                    SetProperty(Opened, { Value = true })
                elseif not SameName and Opened.Value then
                    Tween(Padding, .25, { PaddingLeft = UDim.new(0, 20) })
                    Tween(Button, .25, { BackgroundTransparency = 1, Size = UDim2.new(1, -44, 0, 30) })
                    SetProperty(Opened, { Value = false })
                end
            end
        end

        for Index, Main in next, MainHolder:GetChildren() do
            if Main:IsA("CanvasGroup") then
                local Opened, SameName = Main:FindFirstChild("Value"), (Main.Name == Name)
                local Scroll = Main:FindFirstChild("ScrollingFrame")

                if SameName and not Opened.Value then
                    Opened.Value = true
                    Main.Visible = true
                    Tween(Main, .3, { GroupTransparency = 0 })
                    Tween(Scroll["UIPadding"], .3, { PaddingTop = UDim.new(0, 5) })
                elseif not SameName and Opened.Value then
                    Opened.Value = false
                    Tween(Main, .15, { GroupTransparency = 1 })
                    Tween(Scroll["UIPadding"], .15, { PaddingTop = UDim.new(0, 15) })    
                    task.delay(.2, function()
                        Main.Visible = false
                    end)
                end
            end
        end
    end

    function Options:AddTab(Settings: { Title: string, Icon: string, Section: string? })
        if StoredInfo["Tabs"][Settings.Title] then 
            error("[UI LIB]: A tab with the same name has already been created") 
        end 

        -- Tab Button
        local TabButton = Instance.new("TextButton")
        TabButton.Name = Settings.Title
        TabButton.Size = UDim2.new(1, -44, 0, 30)
        TabButton.BackgroundColor3 = Theme.Component
        TabButton.BackgroundTransparency = 1
        TabButton.Text = ""
        TabButton.LayoutOrder = #StoredInfo["Tabs"] + 1
        TabButton.Parent = TabContainer

        local TabText = Instance.new("TextLabel")
        TabText.Size = UDim2.new(1, 0, 1, 0)
        TabText.BackgroundTransparency = 1
        TabText.Text = Settings.Title
        TabText.TextColor3 = Theme.Tab
        TabText.TextSize = 16
        TabText.Font = Enum.Font.SourceSans
        TabText.TextXAlignment = Enum.TextXAlignment.Left
        TabText.Parent = TabButton

        local TabPadding = Instance.new("UIPadding")
        TabPadding.PaddingLeft = UDim.new(0, 20)
        TabPadding.Parent = TabButton

        local TabIcon = Instance.new("ImageLabel")
        TabIcon.Name = "ICO"
        TabIcon.Size = UDim2.new(0, 20, 0, 20)
        TabIcon.Position = UDim2.new(0, 0, 0.5, -10)
        TabIcon.BackgroundTransparency = 1
        TabIcon.Image = Settings.Icon or ""
        TabIcon.ImageColor3 = Theme.Icon
        TabIcon.Parent = TabButton
        if not Settings.Icon then
            TabIcon:Destroy()
        end

        local Value = Instance.new("BoolValue")
        Value.Name = "Value"
        Value.Value = false
        Value.Parent = TabButton

        -- Main Content for Tab
        local Main = Instance.new("CanvasGroup")
        Main.Name = Settings.Title
        Main.Size = UDim2.new(1, 0, 1, 0)
        Main.BackgroundTransparency = 1
        Main.GroupTransparency = 1
        Main.Visible = false
        Main.Parent = MainHolder

        local MainValue = Instance.new("BoolValue")
        MainValue.Name = "Value"
        MainValue.Value = false
        MainValue.Parent = Main

        local ScrollingFrame = Instance.new("ScrollingFrame")
        ScrollingFrame.Size = UDim2.new(1, 0, 1, 0)
        ScrollingFrame.BackgroundTransparency = 1
        ScrollingFrame.ScrollBarThickness = 5
        ScrollingFrame.ScrollBarImageColor3 = Theme.Component
        ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
        ScrollingFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
        ScrollingFrame.Parent = Main

        local ScrollLayout = Instance.new("UIListLayout")
        ScrollLayout.SortOrder = Enum.SortOrder.LayoutOrder
        ScrollLayout.Padding = UDim.new(0, 5)
        ScrollLayout.Parent = ScrollingFrame

        local ScrollPadding = Instance.new("UIPadding")
        ScrollPadding.PaddingTop = UDim.new(0, 15)
        ScrollPadding.Parent = ScrollingFrame

        StoredInfo["Tabs"][Settings.Title] = { TabButton }

        TabButton.MouseButton1Click:Connect(function()
            Options:SetTab(TabButton.Name)
        end)

        return ScrollingFrame
    end

    function Options:AddButton(Settings: { Title: string, Description: string, Tab: Instance, Callback: any }) 
        local Button = Instance.new("TextButton")
        Button.Size = UDim2.new(1, -10, 0, 50)
        Button.Position = UDim2.new(0, 5, 0, 0)
        Button.BackgroundColor3 = Theme.Component
        Button.Text = ""
        Button.Parent = Settings.Tab

        local Labels = Instance.new("Frame")
        Labels.Name = "Labels"
        Labels.Size = UDim2.new(1, 0, 1, 0)
        Labels.BackgroundTransparency = 1
        Labels.Parent = Button

        local Title = Instance.new("TextLabel")
        Title.Name = "Title"
        Title.Size = UDim2.new(1, 0, 0, 20)
        Title.BackgroundTransparency = 1
        Title.Text = Settings.Title
        Title.TextColor3 = Theme.Title
        Title.TextSize = 16
        Title.Font = Enum.Font.SourceSansBold
        Title.TextXAlignment = Enum.TextXAlignment.Left
        Title.Parent = Labels

        local Description = Instance.new("TextLabel")
        Description.Name = "Description"
        Description.Size = UDim2.new(1, 0, 0, 20)
        Description.Position = UDim2.new(0, 0, 0, 20)
        Description.BackgroundTransparency = 1
        Description.Text = Settings.Description
        Description.TextColor3 = Theme.Description
        Description.TextSize = 14
        Description.Font = Enum.Font.SourceSans
        Description.TextXAlignment = Enum.TextXAlignment.Left
        Description.TextWrapped = true
        Description.Parent = Labels

        Connect(Button.MouseButton1Click, Settings.Callback)
        Animations:Component(Button)
    end

    -- Initialize the window
    SetProperty(Window, { Size = Settings.Size or Setup.Size, Visible = true })
    Animations:Open(Window, Settings.Transparency or 0)

    return Options
end

return Library
